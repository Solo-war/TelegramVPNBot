import os
import uuid
import telebot
import datetime
from telebot.types import (
    InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice, PreCheckoutQuery
)
from py3xui import Api, Client
from dotenv import load_dotenv

load_dotenv()

api = Api.from_env()
api.login()
TOKEN = os.getenv("TELEGRAM_TOKEN")
bot = telebot.TeleBot(TOKEN)
CURRENCY = 'XTR'
Dict = {}

def keyboard_tarif():
    keyboard = InlineKeyboardMarkup()
    keyboard.row_width = 1
    keyboard.add(
        InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥–æ–¥", callback_data="subscription_year"),
        InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–ª–≥–æ–¥–∞", callback_data="subscription_half_year"),
        InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü", callback_data="subscription_month")
    )
    return keyboard

def get_user_connections(telegram_user_id):
    counter = 1
    connections = []
    base_email = f"{telegram_user_id}telegram.User"
    unique_email = f"{base_email}_{counter}"

    while api.client.get_by_email(unique_email) is not None:
        connections.append(unique_email)
        counter += 1
        unique_email = f"{base_email}_{counter}"

    return connections

def get_default_inbound_id():
    return 7

def generate_vless_link(inbound_id, client):
    inbound = api.inbound.get_by_id(inbound_id)
    stream_settings = inbound.stream_settings
    ip = os.environ.get("SERVER_IP", "127.0.0.1")
    port = inbound.port
    protocol = inbound.protocol
    security = stream_settings.security
    network = stream_settings.network
    pbk = stream_settings.reality_settings.get("settings", {}).get("publicKey")
    sni = stream_settings.reality_settings.get("serverNames", ["example.com"])[0]
    short_ids = stream_settings.reality_settings.get("shortIds", [""])[0]
    fp = stream_settings.reality_settings.get("settings", {}).get("fingerprint", "random")
    spx = stream_settings.reality_settings.get("short_id", "")
    inbound_name = inbound.remark
    remark = f"{client.email}"
    vless_link = (
        f"<code>vless://{client.id}@{ip}:{port}?type={network}&security={security}&pbk={pbk}&fp={fp}"
        f"&sni={sni}&sid={short_ids}&spx=%2F#{inbound_name}-{remark}</code>"
    )
    return vless_link

@bot.message_handler(commands=['start'])
def start(message):
    keyboard_tariff = keyboard_tarif()
    telegram_username = message.from_user.username
    bot.send_message(
        message.chat.id,
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {telegram_username}! üåê –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π proxy-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—ã—Å—Ç—Ä–æ –∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ "
        f"–æ–±–µ—Å–ø–µ—á–∏—Ç—å –∑–∞—â–∏—Ç—É –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É. –î–∞–≤–∞–π –ø–æ–¥–∫–ª—é—á–∏–º —Ç–µ–±—è –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º—É –º–∏—Ä—É —É–∂–µ —Å–µ–π—á–∞—Å!"
    )
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ç–∞—Ä–∏—Ñ —É–∂–µ —Å–µ–π—á–∞—Å –∏ –Ω–∞—á–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±—ã—Å—Ç—Ä—ã–º –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º Proxy!",
        reply_markup=keyboard_tariff
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("create_subscrip"))
def create_subscrip(call):
    keyboard_tariff = keyboard_tarif()
    bot.send_message(
        call.message.chat.id,
        "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ç–∞—Ä–∏—Ñ —É–∂–µ —Å–µ–π—á–∞—Å –∏ –Ω–∞—á–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±—ã—Å—Ç—Ä—ã–º –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º Proxy!",
        reply_markup=keyboard_tariff
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("list_connections"))
def list_connections(call):
    user_id = call.from_user.id
    connections = get_user_connections(user_id)

    if not connections:
        bot.send_message(call.message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
        return

    keyboard = InlineKeyboardMarkup()
    for connection in connections:
        client_id = connection.split('_')[-1]
        keyboard.add(
            InlineKeyboardButton(
                text=f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ {client_id}",
                callback_data=f"check_traffic_{client_id}"
            ),
        )
    keyboard.add(
        InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    bot.send_message(call.message.chat.id, "–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith("check_traffic_"))
def check_traffic(call):
    inbound = api.inbound.get_by_id(7)
    for client in inbound.settings.clients:
        if client is not None:
            panel_uuid = client.id
            break

    client_info = api.client.get_traffic_by_id(panel_uuid)
    client_info_up = client_info[0]
    email = client_info_up.email
    up = client_info_up.up
    down = client_info_up.down
    up_traffic = up / (1024 * 1024)
    down_traffic = down / (1024 * 1024)
    online_users = api.client.online()
    status = "–í —Å–µ—Ç–∏" if email in online_users else "–ù–µ –≤ —Å–µ—Ç–∏"
    keyboard = create_keyboard(client.id)

    bot.send_message(
        call.message.chat.id,
        f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ {client.id}\n–í—Ö–æ–¥—è—â–∏–π —Ç—Ä–∞—Ñ–∏–∫: {up_traffic:.2f} MB\n"
        f"–í—ã—Ö–æ–¥—è—â–∏–π —Ç—Ä–∞—Ñ–∏–∫: {down_traffic:.2f} MB\n–°—Ç–∞—Ç—É—Å: {status}",
        reply_markup=keyboard
    )

def send_welcome(message):
    try:
        telegram_user_id = message.from_user.id
        telegram_username = message.from_user.username or "unknown_user"
        email = f"{telegram_user_id}telegram.bot"
        client_id = str(uuid.uuid4())
        keyboard = create_keyboard(client_id)
        bot.send_message(
            message.chat.id,
            f"–ü—Ä–∏–≤–µ—Ç, {telegram_username}!\n"
            f"–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º—É.\n\n"
            f"–í–∞—à email: {email}\n"
            f"–í–∞—à ID: {client_id}\n\n"
            f"–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
            reply_markup=keyboard
        )
    except Exception as e:
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("support_message"))
def support_message(call):
    bot.send_message(
        call.message.chat.id,
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –Ω–∞—à—É —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º, –∏ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø–æ–º–æ—á—å –≤–∞–º –≤ –∫—Ä–∞—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏ - <CONTACT>"
    )

def create_keyboard(client_id):
    keyboard = InlineKeyboardMarkup()
    keyboard.row_width = 1
    keyboard.add(
        InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞—Ñ–∏–∫", callback_data=f"list_connections_{client_id}"),
        InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ", callback_data="create_subscrip"),
        InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support_message")
    )
    return keyboard

@bot.callback_query_handler(func=lambda call: call.data.startswith("subscription_"))
def create_subscription(call):
    telegram_user_id = call.from_user.id
    base_email = f"{telegram_user_id}telegram.User_1"
    client_id = str(uuid.uuid4())
    inbound_id = get_default_inbound_id()

    days = {
        "subscription_year": 365,
        "subscription_half_year": 182.5,
        "subscription_month": 31
    }.get(call.data)

    if days is None:
        bot.send_message(call.message.chat.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏.")
        return

    expiry_time = int((datetime.datetime.now() + datetime.timedelta(days=days)).timestamp()) * 1000
    expiry_datetime = datetime.datetime.fromtimestamp(expiry_time / 1000)
    duration_text = expiry_datetime.strftime("%d %b %Y")

    counter = 2
    unique_email = base_email
    while api.client.get_by_email(unique_email) is not None:
        unique_email = f"{telegram_user_id}telegram.User_{counter}"
        counter += 1

    new_client = Client(
        id=client_id,
        email=unique_email,
        enable=True,
        expiry_time=expiry_time
    )
    api.client.add(inbound_id, [new_client])
    vless_link = generate_vless_link(inbound_id, new_client)
    keyboard = create_keyboard(client_id)

    bot.send_message(
        call.message.chat.id,
        f"üéâ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
        f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
        f"Email: {unique_email}\n"
        f"ID –∫–ª–∏–µ–Ω—Ç–∞: {client_id}\n"
        f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ: {duration_text}\n\n"
        f"–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Å—Å—ã–ª–∫—É:\n"
        f"{vless_link}",
        reply_markup=keyboard, parse_mode='HTML'
    )

def create_keyboard_traffic(client_id):
    keyboard = InlineKeyboardMarkup()
    keyboard.row_width = 1
    keyboard.add(
        InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞—Ñ–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"list_connections_{client_id}"),
        InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ", callback_data="create_subscrip"),
        InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support_message")
    )
    return keyboard

@bot.callback_query_handler(func=lambda call: call.data.startswith("main_menu"))
def main_menu(call):
    bot.answer_callback_query(call.id)

    inbound = api.inbound.get_by_id(7)
    for client in inbound.settings.clients:
        if client is not None:
            client_id = client.id
            break

    keyboard = create_keyboard_traffic(client_id)
    bot.send_message(
        chat_id=call.message.chat.id,
        text="üåê –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π proxy-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—ã—Å—Ç—Ä–æ –∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –æ–±–µ—Å–ø–µ—á–∏—Ç—å –∑–∞—â–∏—Ç—É –¥–∞–Ω–Ω—ã—Ö "
             "–∏ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É. –î–∞–≤–∞–π –ø–æ–¥–∫–ª—é—á–∏–º —Ç–µ–±—è –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º—É –º–∏—Ä—É —É–∂–µ —Å–µ–π—á–∞—Å!",
        reply_markup=keyboard
    )

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.polling()
